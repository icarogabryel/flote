"""
This module have classes responsible for registering the signals values and
controlling time in them simulation.
"""

from datetime import datetime

from .busses import Evaluator
from .component import Component


VERSION = '0.1.2'
CODENAME = 'Gambiarra'
VALID_UNITS = ['fs', 'ps', 'ns', 'us', 'ms', 's']


class WaveSample:
    """
    This class represents a sample of the waves generated by the circuit.
    """
    def __init__(self, time, signals):
        self.time = time

        # signals is a tuple of signal name and value
        self.signals: list[tuple[Evaluator, str]] = signals


class TestBench:
    def __init__(self, component: Component) -> None:
        self.s_time = 0
        self.time_unit: str = 'ns'
        self.samples: list[WaveSample] = []
        self.component: Component = component

    def __str__(self) -> str:
        return self.component.__str__()

    def wait(self, time: int) -> None:
        """This method waits for a certain time."""
        self.s_time += time

    def add_sample(self, sample: WaveSample):
        self.samples.append(sample)

    def set_time_unit(self, time_unit: str) -> None:
        if time_unit not in VALID_UNITS:
            raise ValueError(
                f'Invalid time unit "{time_unit}". Valid units are: '
                f'{VALID_UNITS}'
            )

        else:
            self.time_unit = time_unit

    def dump_vcd(self):
        header_metadata = '' \
            f'$version Generated by Flote v{VERSION} - {CODENAME} $end\n' \
            f'$date {datetime.now().strftime(r'%Y-%m-%d %H:%M:%S')} $end\n' \
            f'$timescale 1{self.time_unit} $end\n'

        header_metadata += '\n$comment Hello from Theresina. $end\n'

        header_declaration = f'\n$scope module {self.component.id} $end\n'

        for bit in self.component.bus_dict:
            header_declaration += f'\t$var wire 1 {bit} {bit} $end\n'

        header_declaration += '$upscope $end\n\n' \

        header = (
            header_metadata +
            header_declaration +
            '$enddefinitions $end\n'
        )

        datasec = ''

        for sample in self.samples:
            datasec += f"\n#{sample.time}\n\n"

            for signal in sample.signals:
                #! FIXME:
                sig_string = str(signal[0])
                if len(sig_string) > 1:  # Bus
                    datasec += f'b{sig_string} {signal[1]}\n'
                else:  # Bit
                    datasec += f"{int(signal[0])}{signal[1]}\n"

        return header + datasec + f'\n#{self.s_time}\n'

    def save_vcd(self, file_path: str) -> None:
        """This method saves the vcd file."""
        with open(file_path, 'w') as f:
            f.write(self.dump_vcd())
            f.close()

    def update(self, new_values: dict[str, str]) -> None:
        self.component.update_signals(new_values)

        sample = WaveSample(self.s_time, [])

        for id, bit in self.component.bus_dict.items():
            sample.signals.append((bit.value, id))

        self.samples.append(sample)
