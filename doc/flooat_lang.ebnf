mod = comp {comp};
comp = ['main'], 'comp', ID, '{', {stmt}, '}';
stmt = decl | assign;
decl = ['in' | 'out'], 'bit', ID, [dimension], ['=', expr], ';';
dimension = '[', ['-'], DEC, ']';
assign = ID, '=', expr, ';';

(* Expression rules *)
expr = term, exprDash;
exprDash = ('or' | 'nor'), term, exprDash | ε;
term = fact, termDash;
termDash = ('xor' | 'xnor'), fact, termDash | ε;
fact = primary, factDash;
factDash = ('and' | 'nand'), primary, factDash | ε;
primary = 'not', primary | '(', expr, ')' | ID | BIT_FIELD;

(* Lexical rules *)
ID = ? [a-zA-Z_][a-zA-Z0-9_]* ?;
DEC = ? 0 | [1-9][0-9]* ?;
BIT_FIELD = ? "([01]+)" ?;
