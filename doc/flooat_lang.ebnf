mod = {comp};
comp = ['main'], 'comp', ID, '{', {stmt}, '}';
stmt = decl | assign;
decl = {'in'| 'out'}, 'bit', ID, {'=', expr}, ';';
assign = ID, '=', expr, ';';

(* Expression rules *)
expr = term, exprDash;
exprDash = ('or' | 'nor'), term, exprDash | ε;
term = factor, termDash;
termDash = ('xor' | 'xnor'), factor, termDash | ε;
factor = primary, factorDash;
factorDash = ('and' | 'nand'), primary, factorDash | ε;
primary = 'not', primary | '(', expr, ')' | ID | BIT_FIELD;

(* Lexical rules *)
ID = ? [a-zA-Z_][a-zA-Z0-9_]* ?;
BIT_FIELD = ? [01] ?;
